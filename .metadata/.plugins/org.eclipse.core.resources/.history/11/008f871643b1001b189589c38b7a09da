package program;

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JTable;
import java.awt.FlowLayout;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import program.DatabaseRetrieval.TableClass;

import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;

import javax.swing.Box;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.JComboBox;
import java.awt.Dimension;
import java.awt.Cursor;
import javax.swing.border.EtchedBorder;

public class Window {

	private JFrame frame;
	private JTextField textField;
	private JTable table;

	/**
	 * Create the application.
	 */
	public static void createWindow(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Window window = new Window();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	private Window() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	/**
	 * 
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 960, 593);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

// Window Menu
		JMenuBar menuBar = new JMenuBar();
		menuBar.setBackground(Color.DARK_GRAY);
		frame.getContentPane().add(menuBar, BorderLayout.NORTH);

		JMenu Server = new JMenu("Server");
		Server.setForeground(Color.WHITE);
		menuBar.add(Server);

		JMenuItem Connect = new JMenuItem("Connect");
		Server.add(Connect);

		JMenu Export = new JMenu("Export");
		Export.setForeground(Color.WHITE);
		menuBar.add(Export);

		JMenuItem exportToCSV = new JMenuItem("To CSV file");
		Export.add(exportToCSV);

// Top Toolbar
		JPanel wrapper = new JPanel();
		frame.getContentPane().add(wrapper, BorderLayout.CENTER);
		wrapper.setLayout(new BorderLayout(0, 0));

		JToolBar toolBar = new JToolBar();
		toolBar.setFloatable(false);
		wrapper.add(toolBar, BorderLayout.NORTH);

		JButton btnNewButton = new JButton("New button");
		toolBar.add(btnNewButton);

		JButton btnNewButton_1 = new JButton("New button");
		toolBar.add(btnNewButton_1);

		textField = new JTextField();
		toolBar.add(textField);
		textField.setColumns(10);

		JButton btnNewButton_2 = new JButton("New button");
		toolBar.add(btnNewButton_2);

// Table
		JPanel main = new JPanel();
		main.setBackground(Color.WHITE);
		wrapper.add(main, BorderLayout.CENTER);
		main.setLayout(new BorderLayout(0, 0));

		JPanel tableWrapper = new JPanel();
		tableWrapper.setBackground(Color.WHITE);
		main.add(tableWrapper, BorderLayout.CENTER);
		tableWrapper.setLayout(new BorderLayout(0, 0));

		Component nSpace = Box.createVerticalStrut(20);
		main.add(nSpace, BorderLayout.NORTH);

		Component sSpace = Box.createVerticalStrut(23);
		main.add(sSpace, BorderLayout.SOUTH);

		Component wSpace = Box.createHorizontalStrut(20);
		main.add(wSpace, BorderLayout.WEST);

		Component eSpace = Box.createHorizontalStrut(20);
		main.add(eSpace, BorderLayout.EAST);

// Bottom Tools
		JPanel bottomTools = new JPanel();
		bottomTools.setPreferredSize(new Dimension(10, 100));
		wrapper.add(bottomTools, BorderLayout.SOUTH);

		// Show Suppliers Button
		JButton btnShowSuppliers = new JButton("Show Suppliers");
		btnShowSuppliers.setBounds(247, 12, 105, 23);
		btnShowSuppliers.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		btnShowSuppliers.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				TableClass c = DatabaseRetrieval.display("select * from suppliers");

				if (table == null) {
					table = new JTable(c.data, c.columnNames);
					table.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
					table.setBackground(Color.WHITE);

					tableWrapper.setLayout(new BorderLayout());
					tableWrapper.add(table.getTableHeader(), BorderLayout.PAGE_START);
					tableWrapper.add(table, BorderLayout.CENTER);
					frame.validate();
				} else {
					DefaultTableModel data = new DefaultTableModel(c.data, c.columnNames);
					table.setModel(data);
				}

			}
		});

		JButton btnShowAllClothes = new JButton("Show All Clothes");
		btnShowAllClothes.setBounds(131, 12, 111, 23);
		btnShowAllClothes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TableClass c = DatabaseRetrieval.display("SELECT\r\n"
						+ "	clothes.ClothesID, clothes.Category, clothes.Color, clothes.Brand, clothes.Material, clothes.Price, clothes.Gender,\r\n"
						+ "    dresses.Length AS 'Dress length', \r\n" + "    dresses.Type AS 'Dress type',\r\n"
						+ "    hats.Size AS 'Hat size',\r\n" + "    hats.Type AS 'Hat type',\r\n"
						+ "    pants.Fit AS 'Pants fit',\r\n" + "    pants.Inseam AS 'Pants inseam',\r\n"
						+ "    pants.Length AS 'Pants length',\r\n" + "    pants.Type AS 'Pants type',\r\n"
						+ "    pants.WaistSize AS 'Pants waist size',\r\n" + "    shoes.Laces AS 'Shoe laces',\r\n"
						+ "    shoes.Size AS 'Shoe size',\r\n" + "    shoes.Type AS 'Shoe type',\r\n"
						+ "    tops.Collar AS 'Top collar',\r\n" + "    tops.Size AS 'Top size',\r\n"
						+ "    tops.Sleeves AS 'Top Sleeve',\r\n" + "    tops.Type AS 'Top type'\r\n"
						+ "    FROM clothes \r\n"
						+ "    	LEFT JOIN dresses ON clothes.ClothesID = dresses.ClothesID\r\n"
						+ "        LEFT JOIN hats ON clothes.ClothesID = hats.ClothesID\r\n"
						+ "        LEFT JOIN pants ON clothes.ClothesID = pants.ClothesID\r\n"
						+ "        LEFT JOIN shoes ON clothes.ClothesID = shoes.ClothesID\r\n"
						+ "        LEFT JOIN tops ON clothes.ClothesID = tops.ClothesID");

				if (table == null) {

					table = new JTable(c.data, c.columnNames);
					table.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
					table.setBackground(Color.WHITE);

					tableWrapper.setLayout(new BorderLayout());
					tableWrapper.add(table.getTableHeader(), BorderLayout.PAGE_START);
					tableWrapper.add(table, BorderLayout.CENTER);
					frame.validate();
				} else {
					DefaultTableModel data = new DefaultTableModel(c.data, c.columnNames);
					table.setModel(data);
				}

				// Renaming the table header
				JTableHeader th = table.getTableHeader();
				TableColumnModel tcm = th.getColumnModel();
				TableColumn tc = tcm.getColumn(2);
				tc.setHeaderValue("Dress Length");
				tc = tcm.getColumn(3);
				tc.setHeaderValue("Dress Type");
				tc = tcm.getColumn(4);
				tc.setHeaderValue("Hat Size");
				tc = tcm.getColumn(5);
				tc.setHeaderValue("Hat Type");
				tc = tcm.getColumn(6);
				tc.setHeaderValue("Pants Fit");
				tc = tcm.getColumn(7);
				tc.setHeaderValue("Pants Inseam");
				tc = tcm.getColumn(8);
				tc.setHeaderValue("Pants Length");
				tc = tcm.getColumn(9);
				tc.setHeaderValue("Pants Type");
				tc = tcm.getColumn(10);
				tc.setHeaderValue("Pants Waiste Size");
				tc = tcm.getColumn(11);
				tc.setHeaderValue("Shoe Laces");
				tc = tcm.getColumn(12);
				tc.setHeaderValue("Shoe Size");
				tc = tcm.getColumn(13);
				tc.setHeaderValue("Shoe Type");
				tc = tcm.getColumn(14);
				tc.setHeaderValue("Top Collar");
				tc = tcm.getColumn(15);
				tc.setHeaderValue("Top Size");
				tc = tcm.getColumn(16);
				tc.setHeaderValue("Top Sleeve");
				tc = tcm.getColumn(17);
				tc.setHeaderValue("Top Type");

				th.repaint();
			}
		});
		bottomTools.setLayout(null);
		bottomTools.add(btnShowAllClothes);

		JButton btnNewButton_3 = new JButton("All Employees");
		btnNewButton_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TableClass c = DatabaseRetrieval.display("SELECT * FROM employees");
				if (table == null) {

					table = new JTable(c.data, c.columnNames);
					table.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
					table.setBackground(Color.WHITE);

					tableWrapper.setLayout(new BorderLayout());
					tableWrapper.add(table.getTableHeader(), BorderLayout.PAGE_START);
					tableWrapper.add(table, BorderLayout.CENTER);
					frame.validate();
				} else {
					DefaultTableModel data = new DefaultTableModel(c.data, c.columnNames);
					table.setModel(data);
				}
			}
		});
		btnNewButton_3.setBounds(247, 53, 105, 23);
		bottomTools.add(btnNewButton_3);
		bottomTools.add(btnShowSuppliers);

		// Show Clients Button
		JButton btnShowClients = new JButton("Show Clients");
		btnShowClients.setBounds(357, 12, 93, 23);
		btnShowClients.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		btnShowClients.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				TableClass c = DatabaseRetrieval.display("select * from clients");

				if (table == null) {

					table = new JTable(c.data, c.columnNames);
					table.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
					table.setBackground(Color.WHITE);

					tableWrapper.setLayout(new BorderLayout());
					tableWrapper.add(table.getTableHeader(), BorderLayout.PAGE_START);
					tableWrapper.add(table, BorderLayout.CENTER);
					frame.validate();
				} else {
					DefaultTableModel data = new DefaultTableModel(c.data, c.columnNames);
					table.setModel(data);
				}
			}
		});
		bottomTools.add(btnShowClients);

		JPanel panel = new JPanel();
		panel.setBounds(455, 5, 451, 37);
		panel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		bottomTools.add(panel);

// Fetch Categories/Colors/Materials/Brands data from database
		// Retrieve ResultSets from db
		ResultSet categRes = DatabaseRetrieval.executeQuery("SELECT Category FROM clothes");
		ResultSet colorRes = DatabaseRetrieval.executeQuery("SELECT Color FROM clothes");
		ResultSet matRes = DatabaseRetrieval.executeQuery("SELECT Material FROM clothes");
		ResultSet brandRes = DatabaseRetrieval.executeQuery("SELECT Brand FROM clothes");
		// Initialize result arrays
		ArrayList<String> categoryResArray = new ArrayList<String>();
		ArrayList<String> colorResArray = new ArrayList<String>();
		ArrayList<String> matResArray = new ArrayList<String>();
		ArrayList<String> brandResArray = new ArrayList<String>();
		// Add data from resultset to corresponding array
		try {
			while (categRes.next()) {
				categoryResArray.add(categRes.getString("Category"));
			}
			while (colorRes.next()) {
				colorResArray.add(colorRes.getString("Color"));
			}
			while (matRes.next()) {
				matResArray.add(matRes.getString("Material"));
			}
			while (brandRes.next()) {
				brandResArray.add(brandRes.getString("Brand"));
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		// Transform result arrays into string arrays since the comboBoxModel only
		// accepts it
		String[] CategoriesList = new String[categoryResArray.size() + 1];
		String[] ColorsList = new String[colorResArray.size() + 1];
		String[] MaterialsList = new String[matResArray.size() + 1];
		String[] BrandsList = new String[brandResArray.size() + 1];
		// Set Model to the resulting string arrays
		CategoriesList = categoryResArray.toArray(CategoriesList);
		ColorsList = colorResArray.toArray(ColorsList);
		MaterialsList = matResArray.toArray(MaterialsList);
		BrandsList = brandResArray.toArray(BrandsList);

// JComboBoxes
		// Select Categories
		JComboBox Categories = new JComboBox(CategoriesList);
		Categories.setToolTipText("Category");
		Categories.setPreferredSize(new Dimension(80, 22));
		panel.add(Categories);
		Categories.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Categories.insertItemAt("All Categories", 0);
		Categories.setSelectedIndex(0);

		// Select Colors
		JComboBox Color = new JComboBox(ColorsList);
		Color.setToolTipText("Color");
		Color.setPreferredSize(new Dimension(80, 22));
		panel.add(Color);
		Color.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Color.insertItemAt("All Colors", 0);
		Color.setSelectedIndex(0);

		// Select Materials
		JComboBox Material = new JComboBox(MaterialsList);
		Material.setToolTipText("Material");
		Material.setPreferredSize(new Dimension(80, 22));
		panel.add(Material);
		Material.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Material.insertItemAt("All Materials", 0);
		Material.setSelectedIndex(0);

		// Select Brands
		JComboBox Brand = new JComboBox(BrandsList);
		Brand.setToolTipText("Brand");
		Brand.setPreferredSize(new Dimension(80, 22));
		panel.add(Brand);
		Brand.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		Brand.insertItemAt("All Brands", 0);
		Brand.setSelectedIndex(0);

		// Show Clothes based on Categories/Colors/Materials/Brands
		JButton btnShowClothes = new JButton("Show Clothes");

		btnShowClothes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String sql = "SELECT\r\n"
						+ "	clothes.ClothesID, clothes.Category, clothes.Color, clothes.Brand, clothes.Material, clothes.Price, clothes.Gender,\r\n"
						+ "    dresses.Length AS 'Dress length', \r\n" + "    dresses.Type AS 'Dress type',\r\n"
						+ "    hats.Size AS 'Hat size',\r\n" + "    hats.Type AS 'Hat type',\r\n"
						+ "    pants.Fit AS 'Pants fit',\r\n" + "    pants.Inseam AS 'Pants inseam',\r\n"
						+ "    pants.Length AS 'Pants length',\r\n" + "    pants.Type AS 'Pants type',\r\n"
						+ "    pants.WaistSize AS 'Pants waist size',\r\n" + "    shoes.Laces AS 'Shoe laces',\r\n"
						+ "    shoes.Size AS 'Shoe size',\r\n" + "    shoes.Type AS 'Shoe type',\r\n"
						+ "    tops.Collar AS 'Top collar',\r\n" + "    tops.Size AS 'Top size',\r\n"
						+ "    tops.Sleeves AS 'Top Sleeve',\r\n" + "    tops.Type AS 'Top type'\r\n"
						+ "    FROM clothes \r\n"
						+ "    	LEFT JOIN dresses ON clothes.ClothesID = dresses.ClothesID\r\n"
						+ "        LEFT JOIN hats ON clothes.ClothesID = hats.ClothesID\r\n"
						+ "        LEFT JOIN pants ON clothes.ClothesID = pants.ClothesID\r\n"
						+ "        LEFT JOIN shoes ON clothes.ClothesID = shoes.ClothesID\r\n"
						+ "        LEFT JOIN tops ON clothes.ClothesID = tops.ClothesID";
				if (Categories.getSelectedItem() != "All Categories") {
					sql += " WHERE clothes.Category = '" + Categories.getSelectedItem() + "'";
				}

				if (Color.getSelectedItem() != "All Colors") {
					if (sql.contains("WHERE")) {
						sql += " AND clothes.Color = '" + Color.getSelectedItem() + "'";
					} else {
						sql += " WHERE clothes.Color = '" + Color.getSelectedItem() + "'";
					}
				}

				if (Material.getSelectedItem() != "All Materials") {
					if (sql.contains("WHERE")) {
						sql += " AND clothes.Material = '" + Material.getSelectedItem() + "'";
					} else {
						sql += " WHERE clothes.Material = '" + Material.getSelectedItem() + "'";
					}
				}

				if (Brand.getSelectedItem() != "All Brands") {
					if (sql.contains("WHERE")) {
						sql += " AND clothes.Brand = '" + Brand.getSelectedItem() + "'";
					} else {
						sql += " WHERE clothes.Brand = '" + Brand.getSelectedItem() + "'";
					}
				}

				TableClass c = DatabaseRetrieval.display(sql);

				if (table == null) {
					table = new JTable(c.data, c.columnNames);
					table.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
//					table.setBackground(Color.WHITE);

					tableWrapper.setLayout(new BorderLayout());
					tableWrapper.add(table.getTableHeader(), BorderLayout.PAGE_START);
					tableWrapper.add(table, BorderLayout.CENTER);
					frame.validate();
				} else {
					DefaultTableModel data = new DefaultTableModel(c.data, c.columnNames);
					table.setModel(data);
				}

				// Renaming the table header
				JTableHeader th = table.getTableHeader();
				TableColumnModel tcm = th.getColumnModel();
				TableColumn tc = tcm.getColumn(2);
				tc.setHeaderValue("Dress Length");
				tc = tcm.getColumn(3);
				tc.setHeaderValue("Dress Type");
				tc = tcm.getColumn(4);
				tc.setHeaderValue("Hat Size");
				tc = tcm.getColumn(5);
				tc.setHeaderValue("Hat Type");
				tc = tcm.getColumn(6);
				tc.setHeaderValue("Pants Fit");
				tc = tcm.getColumn(7);
				tc.setHeaderValue("Pants Inseam");
				tc = tcm.getColumn(8);
				tc.setHeaderValue("Pants Length");
				tc = tcm.getColumn(9);
				tc.setHeaderValue("Pants Type");
				tc = tcm.getColumn(10);
				tc.setHeaderValue("Pants Waiste Size");
				tc = tcm.getColumn(11);
				tc.setHeaderValue("Shoe Laces");
				tc = tcm.getColumn(12);
				tc.setHeaderValue("Shoe Size");
				tc = tcm.getColumn(13);
				tc.setHeaderValue("Shoe Type");
				tc = tcm.getColumn(14);
				tc.setHeaderValue("Top Collar");
				tc = tcm.getColumn(15);
				tc.setHeaderValue("Top Size");
				tc = tcm.getColumn(16);
				tc.setHeaderValue("Top Sleeve");
				tc = tcm.getColumn(17);
				tc.setHeaderValue("Top Type");

				th.repaint();

			}
		});

		panel.add(btnShowClothes);
		btnShowClothes.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		btnShowClothes.setBackground(new Color(240, 240, 240));
	}

}
